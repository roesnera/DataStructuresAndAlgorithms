Sorting - the process of rearranging items in a collection so that they are ordered in a particular way.
requires a swap function in order to switch the items at given locations in an array upon comparison

JS Array.sort()
    - sorts according to String unicode code points
    - this means that sorting numbers gets real funky
    - ^ it will just sort by the first digit in a number as if it were a String
    - you can pass in a custom sorting algorithm
        - if your function returns a negative number, a should come before b
        - if your function returns a positive number, a should come after b
        - otherwise, a&b will be treated as sortable together


Bubble Sort
    - not all that efficient
    - not super common
    - sorting algorithm where larger items bubble up to the top
    - time complexity average: O(n^2), best O(n)

Selection Sort
    - similar to bubble sort
    - instead of placing larger values at the end, it places small values into a sorted position
    - time complexity average: O(n^2), best O(n^2)
    - in selection sort, we only swap once per outer loop, rather than once per inner loop
    - so it is better than bubble sort if you care about the number of swaps, but otherwise not very good at all

Insertion Sort
    - creates a sorted half of the array and inserts values into the sorted position of that half
    - time complexity avg: O(n^2), best: O(n)

Merge Sort
    - decomposes arrays into smaller subarrays of 0 or 1 elements
    - each of these subarrays are sorted!
    - then we merge them back together
    - time complexity is O(nlogn) in all cases, there aren't edge cases here because it works the same way no matter what
    - space complexity is O(n)

Quick Sort
    - like merge sort, exploits the sorted nature of 0 or 1 element arrays
    - then uses a "pivot" to find the index where one element should end up in the sorted array
    - then we sort either side of the "pivot"
    